[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Basic Mixed Hot Water Cylinder",
    "section": "",
    "text": "@patch\ndef step(self:HWC, action):\n    self._thermostat()\n    self.action = action\n    if action == 1:\n        self.last_power = self.current_step\n    # print(action)\n    # import pdb; pdb.set_trace()\n    flow = self.flow_df.iloc[self.current_step]\n    self.flow = flow*(self.T_demand-self.T_cold)/(self.T-self.T_cold)\n    self.T  = self._update()\n\n    r,c = self.rtp.iloc[self.current_step].name.dayofweek, self.rtp.iloc[self.current_step].name.hour\n    self.thermogram[r,c] = self.T_stat * self.action * self.Q /60 +self.thermogram[r,c]*(1- self.alpha)\n    self.power_hist.append(self.T_stat * self.action * self.Q /60)\n    # self.T_history.append(self.T)\n    # self.history.append([self.id,\n    #                      self.df.iloc[self.current_step].name.hour,\n    #                      self.df.iloc[self.current_step].name,\n    #                      action*self.T_stat,\n    #                      self.T,\n    #                      self.flow])\n    # reward, done = self._get_reward()\n    self.current_step += 1\n\n    # Are we at the left of the grid?\n    done = False\n    # Null reward everywhere except when reaching the goal (left of the grid)\n    reward = self._time_reward(self.time_since_full,2)\n    # reward += self._time_reward((self.current_step-self.last_power),40)\n    # print(self.time_since_full,1-self.time_since_full/30)\n    # reward += np.array(self.cost_hist).sum()/6\n    # reward += 5*self._power_reward(self.diff)\n    # reward = 0\n    reward += 2*self.rtp.iloc[self.current_step].price_indicator*self.action\n    # reward = self._power_reward(self.rtp.iloc[self.current_step].cost*self.action)\n    # print(reward,(self.current_step-self.last_power),self._time_reward(self.time_since_full),self._power_reward(self.diff),2*self._cost_reward(self.rtp.iloc[self.current_step].cost)*self.action)\n    # print(reward,self.diff)\n    # reward -= .05*(self.T_set - self.T)\n    # print(reward)\n    if self.T <= 50:\n        done = True\n        reward = -100\n    # done = False if self.T >= 45 else True    # Optionally we can pass additional info, we are not using that for now\n    # done = False if self.current_step <= 60*24*20 else True    # Optionally we can pass additional info, we are not using that for now\n\n    info = self._get_info()\n    observation = self._get_observation()\n    return observation, reward, done, info\n\n@patch\ndef _thermostat(self:HWC):\n    if (self.T < self.T_set- self.T_deadband) :\n        self.T_stat = 1\n        # print(self.current_step, 't on')\n    elif (self.T > self.T_set) :\n        self.T_stat = 0\n        self.full_charge = self.current_step\n        # print(self.current_step, 't off')\n\n    return \n\n@patch\ndef _power_reward(self:HWC,x): return .5-pow(x/5,2)\n@patch\ndef _time_reward(self:HWC,x, b=2): return -pow(x/b,2) #return 2 - 1.5**(x/120)\n@patch\ndef _cost_reward(self:HWC,x): return .1-np.exp(-30*x)#2 - 1.5**(x)\n@patch\ndef _update(self:HWC, ts = 60):\n    # if self.T_stat * self.action == 1 :\n    #     print(self.action,'heating') \n    return self.T + \\\n           self.flow/self.Volume*(self.T_cold-self.T) * ts + \\\n           self.T_stat * self.action * self.Q / (self.Cv*self.rho*self.Volume) * ts - \\\n           (self.U*self.Area)/(self.Cv*self.rho*self.Volume)*(self.T-self.T_ambient) * ts\n\n@patch\ndef _get_info(self:HWC):\n    return {\n        \"temperature\": self.T\n    }\n\n@patch\ndef _get_observation(self:HWC):\n    d,h = self.rtp.iloc[self.current_step].name.dayofweek, self.rtp.iloc[self.current_step].name.hour\n    load_hist = np.roll(self.thermogram.flatten(), -(d*24+h+3))[-12:]\n    self.recent_hist = np.array([np.array(self.power_hist)[i:i+60].sum() for i in range(0, len(self.power_hist), 60)][::-1])\n    last_power = self.current_step-self.last_power\n    self.diff = self.recent_hist.sum()- load_hist.sum()\n\n    # print(recent_hist, load_hist, self.diff)\n    self.time_since_full = (self.current_step - self.full_charge)/(60)\n    \n    if self.current_step == 0.:\n        thermo_info = int(self.T_stat)\n    elif self.action == 1.:\n        thermo_info = int(self.T_stat)\n    else: \n        thermo_info = -1. #no information\n\n    # print(thermo_info)\n    # np.array(self.thermo_hist) # action = 1 and thermostat = 1 / action = 0 and no thermostat feedback / action = 1 and thermostat = 0\n    obs = np.concatenate((np.array(thermo_info),\n    self.time_since_full,\n    self.diff,\n    last_power/60,\n                        #   load_hist,\n                        #  recent_hist,\n                          np.array(self.rtp.iloc[self.current_step]['n_cost'],self.rtp.iloc[self.current_step]['price_indicator'])), \n                          axis=None, \n                          dtype=np.float32)\n    print(obs)\n    # for i in range(6):\n    #     self.thermo_hist.append(self.T_stat)\n    #     self.cost_hist.append(self.T_stat*self.Q)\n    # print(np.array([xi for xi in bb]))\n    return obs\n    # return {\"temperature\": self.T,\n    #         \"thermostat\": self.T_stat}\n\n@patch\ndef reset(self:HWC):\n    self.power_hist = deque(np.ones(60*12)*.5/60,maxlen=60*12)\n\n    self.action = 0\n    self.last_power = 0\n    self.T = self.T_set + np.random.uniform(-4, 0)\n    self.unit = random.choice(range(10)) \n    self.bedrooms = random.choice(range(5))+1 \n    self.flow_df = load_demand(bed=self.bedrooms, unit=self.unit)\n    self.thermogram = np.ones([7,24])*(.5+self.bedrooms*.1)\n    self.full_charge = self.current_step\n    self.thermo_hist = deque(np.ones(60*24)/(60*24),maxlen=60*24)\n    self.cost_hist = deque(np.ones(60*24)*.01,maxlen=60*24)\n    return self._get_observation()"
  },
  {
    "objectID": "hwc.html",
    "href": "hwc.html",
    "title": "Basic Mixed Hot Water Cylinder",
    "section": "",
    "text": "Provide a mechanisim to set the thermostat state based on the model temperature\n\n@patch\ndef _thermostat(self:HWC):\n    if (self.T < self.T_set- self.T_deadband) :\n        self.thermostat = 1\n    elif (self.T > self.T_set) :\n        self.thermostat = 0\n    return\n\n\n@patch\ndef _update_temperatures(self:HWC, action = 1, ts = 60):\n    '''\n    Use the model from M Jack Paper to update the hwc temperature\n    Takes existing state (temperature)\n    '''\n    temperature = self.T # existing temperatue\n    temperature += self.flow/self.Volume*(self.T_cold-self.T) * ts # change in temperature due to flow mixing\n    temperature += action * self.thermostat *  self.Q / (self.Cv*self.rho*self.Volume) * ts # change in temperature due to element\n    temperature += self.U * self.Area * (self.T_ambient-self.T) * ts # change in temperature due to heat loss\n    return temperature\n\n\ndf = (pd.DataFrame(load_demand(bed=3,unit=3)))\ndf.columns=[\"flow\"]\ndf = df.merge(load_power(), how='left', left_index=True, right_index=True)\ndf.head()\n\n\n\n\n\n  \n    \n      \n      flow\n      price\n      price_kw\n      date\n      week\n      hour\n      day\n      peak\n      tou\n      cost\n      n_cost\n      sr_cost\n      lr_cost\n    \n    \n      timestamp\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-01-01 00:00:00\n      0.0\n      7.920\n      0.007920\n      2020-01-01\n      1\n      0\n      2\n      0\n      0.02\n      0.027920\n      -0.22080\n      0.162438\n      0.149272\n    \n    \n      2020-01-01 00:01:00\n      0.0\n      8.526\n      0.008526\n      2020-01-01\n      1\n      0\n      2\n      0\n      0.02\n      0.028526\n      -0.21474\n      0.158675\n      0.145694\n    \n    \n      2020-01-01 00:02:00\n      0.0\n      9.132\n      0.009132\n      2020-01-01\n      1\n      0\n      2\n      0\n      0.02\n      0.029132\n      -0.20868\n      0.155010\n      0.142235\n    \n    \n      2020-01-01 00:03:00\n      0.0\n      9.738\n      0.009738\n      2020-01-01\n      1\n      0\n      2\n      0\n      0.02\n      0.029738\n      -0.20262\n      0.151437\n      0.138888\n    \n    \n      2020-01-01 00:04:00\n      0.0\n      10.344\n      0.010344\n      2020-01-01\n      1\n      0\n      2\n      0\n      0.02\n      0.030344\n      -0.19656\n      0.147952\n      0.135645\n    \n  \n\n\n\n\n\nhwc = HWC(T_set=68, T_deadband=2, element=3000, radius=.25, height=1)\n# set the start temperature to the set temperature with a small random variation\nhwc.T = hwc.T_set + np.random.uniform(-4, 0)\nhwc.thermostat = 0\nthermogram = np.ones([7,24])*(.5+3*.1)\n\nresults = []\n\nfor index, row in df[:500].iterrows():\n  raw_flow = row['flow']\n  hwc.flow = raw_flow*(hwc.T_demand-hwc.T_cold)/(hwc.T-hwc.T_cold)\n  hwc._thermostat()\n  hwc.T = hwc._update_temperatures(action=1)\n  results.append([index,hwc.T, hwc.thermostat, hwc.flow,row.cost])\n  r,c = row.day, row.hour\n  thermogram[r,c] = hwc.thermostat * 1 * hwc.Q /60 + thermogram[r,c]*(1- 0.1)\n  # print(hwc.T, hwc.thermostat)\n  # hwc.T = hwc._update_temperatures(action = row['power'])\n  # df.loc[index,'T'] = hwc.T\nresults = pd.DataFrame(results, columns=['time','T','thermostat','flow','cost']).set_index('time')\n\n65.87929532569723 1\n66.04844901367922 1\n66.21743663541636 1\n66.38625835394383 1\n66.5549143321367 1\n66.72340473271018 1\n66.89172971821971 1\n67.05988945106114 1\n67.2278840934709 1\n67.39571380752616 1\n67.56337875514494 1\n67.7308790980863 1\n67.89821499795053 1\n68.06538661617923 1\n68.01328979469382 0\n67.9612441191433 0\n67.90924953931528 0\n67.85730600504664 0\n67.80541346622351 0\n67.75357187278125 0\n67.70178117470432 0\n67.65004132202634 0\n67.59835226482994 0\n67.54671395324678 0\n67.49512633745746 0\n67.44358936769152 0\n67.39210299422732 0\n67.34066716739207 0\n67.28928183756173 0\n67.237946955161 0\n67.1866624706632 0\n67.13542833459032 0\n67.08424449751291 0\n67.03311091005006 0\n66.98202752286929 0\n66.93099428668661 0\n66.8800111522664 0\n66.82907807042137 0\n66.77819499201252 0\n66.72736186794906 0\n66.67657864918846 0\n66.6258452867363 0\n66.57516173164623 0\n66.52452793502003 0\n66.47394384800742 0\n66.42340942180611 0\n66.37292460766172 0\n66.3224893568677 0\n66.27210362076536 0\n66.22176735074378 0\n66.17148049823972 0\n66.12124301473766 0\n66.0710548517697 0\n66.02091596091552 0\n65.97082629380232 0\n66.13989012146651 1\n66.30878797110601 1\n66.47752000566939 1\n66.64608638794519 1\n66.81448728056218 1\n66.98272284598944 1\n67.15079324653658 1\n67.31869864435383 1\n67.48643920143225 1\n67.65401507960384 1\n67.82142644054176 1\n67.9886734457604 1\n68.15575625661563 1\n68.1035707149432 0\n68.0514364063065 0\n67.9993532804076 0\n67.947321286998 0\n67.89534037587848 0\n67.8434104968991 0\n67.7915315999592 0\n67.73970363500726 0\n67.68792655204093 0\n67.63620030110694 0\n67.58452483230106 0\n67.53290009576804 0\n67.48132604170159 0\n67.42980262034432 0\n67.37832978198769 0\n67.32690747697194 0\n67.27553565568608 0\n67.22421426856785 0\n67.17294326610359 0\n67.12172259882828 0\n67.0705522173255 0\n67.01943207222727 0\n66.96836211421414 0\n66.91734229401504 0\n66.86637256240729 0\n66.81545287021653 0\n66.76458316831669 0\n66.7137634076299 0\n66.66299353912649 0\n66.61227351382493 0\n66.56160328279178 0\n66.51098279714161 0\n66.46041200803701 0\n66.40989086668853 0\n66.35941932435458 0\n66.30899733234145 0\n66.25862484200321 0\n66.20830180474172 0\n66.15802817200654 0\n66.10780389529488 0\n66.05762892615158 0\n66.00750321616904 0\n65.9574267169872 0\n66.12650369965516 1\n66.29541469138354 1\n66.46415985513357 1\n66.6327393537065 1\n66.80115334974371 1\n66.96940200572696 1\n67.13748548397845 1\n67.30540394666104 1\n67.4731575557784 1\n67.64074647317513 1\n67.80817086053695 1\n67.97543087939083 1\n68.14252669110519 1\n68.09035413752832 0\n68.03823280423616 0\n67.98616264094329 0\n67.9341435974137 0\n67.88217562346067 0\n67.83025866894675 0\n67.77839268378375 0\n67.7265776179326 0\n67.67481342140341 0\n67.62310004425532 0\n67.57143743659653 0\n67.5198255485842 0\n67.46826433042443 0\n67.41675373237223 0\n67.3652937047314 0\n67.31388419785456 0\n67.26252516214309 0\n67.21121654804702 0\n67.15995830606504 0\n67.10875038674445 0\n67.05759274068109 0\n67.00648531851931 0\n66.95542807095191 0\n66.90442094872009 0\n66.85346390261343 0\n66.80255688346979 0\n66.75169984217533 0\n66.7008927296644 0\n66.65013549691955 0\n66.59942809497142 0\n66.54877047489873 0\n66.49816258782825 0\n66.44760438493472 0\n66.39709581744081 0\n66.3466368366171 0\n66.29622739378195 0\n66.24586744030158 0\n66.19555692758993 0\n66.14529580710864 0\n66.09508403036699 0\n66.04492154892188 0\n65.99480831437776 0\n66.16384859774831 1\n66.33272292620873 1\n66.50143146268488 1\n66.66997436994265 1\n66.83835181058816 1\n67.00656394706787 1\n67.17461094166876 1\n67.3424929565185 1\n67.51021015358558 1\n67.67776269467947 1\n67.84515074145081 1\n68.01237445539151 1\n67.96032967847326 0\n67.90833599639527 0\n67.85639335899529 0\n67.80450171616033 0\n67.7526610178266 0\n67.70087121397944 0\n67.64913225465331 0\n67.59744408993171 0\n67.54580666994717 0\n67.49421994488115 0\n67.44268386496404 0\n67.39119838047507 0\n67.3397634417423 0\n67.28837899914255 0\n67.23704500310136 0\n67.18576140409293 0\n67.13452815264009 0\n67.08334519931424 0\n67.03221249473532 0\n66.98112998957173 0\n66.9300976345403 0\n66.87911538040628 0\n66.8281831779832 0\n66.77730097813294 0\n66.72646873176556 0\n66.67568638983936 0\n66.62495390336075 0\n66.57427122338427 0\n66.52363830101251 0\n66.47305508739605 0\n66.42252153373343 0\n66.37203759127111 0\n66.3216032113034 0\n66.27121834517243 0\n66.22088294426811 0\n66.17059696002808 0\n66.12036034393763 0\n66.0701730475297 0\n66.0200350223848 0\n65.96994622013098 0\n66.13901091180547 1\n66.30790962460705 1\n66.47664252148508 1\n66.64520976522897 1\n66.8136115184683 1\n66.981847943673 1\n67.14991920315349 1\n67.31782545906083 1\n67.4855668733869 1\n67.65314360796455 1\n67.82055582446775 1\n67.98780368441173 1\n68.15488734915317 1\n68.10270266052864 0\n68.05056920410236 0\n67.99848692957724 0\n67.94645578670557 0\n67.89447572528897 0\n67.84254669517833 0\n67.79066864627379 0\n67.73884152852466 0\n67.6870652919294 0\n67.63533988653555 0\n67.5836652624397 0\n67.53204136978741 0\n67.48046815877322 0\n67.42894557964054 0\n67.37747358268165 0\n67.3260521182376 0\n67.27468113669822 0\n67.22336058850203 0\n67.17209042413621 0\n67.12087059413656 0\n67.06970104908743 0\n67.01858173962167 0\n66.96751261642062 0\n66.91649363021403 0\n66.86552473178003 0\n66.81460587194505 0\n66.7637370015838 0\n66.71291807161927 0\n66.66214903302256 0\n66.61142983681293 0\n66.56076043405774 0\n66.51014077587239 0\n66.45957081342024 0\n66.40905049791265 0\n66.3585797806088 0\n66.30815861281582 0\n66.25778694588855 0\n66.20746473122965 0\n66.15719192028946 0\n66.10696846456601 0\n66.0567943156049 0\n66.00666942499936 0\n65.95659374439009 0\n66.12567154482699 1\n66.29458335352146 1\n66.46332933343554 1\n66.63190964737123 1\n66.80032445797073 1\n66.96857392771656 1\n67.13665821893174 1\n67.3045774937799 1\n67.47233191426548 1\n67.63992164223387 1\n67.80734683937156 1\n67.97460766720633 1\n68.14170428710736 1\n68.08953254092373 0\n68.03741201423215 0\n67.98534265674797 0\n67.93332441823598 0\n67.88135724851023 0\n67.82944109743404 0\n67.77757591491999 0\n67.72576165092981 0\n67.67399825547434 0\n67.62228567861354 0\n67.57062387045634 0\n67.5190127811607 0\n67.46745236093348 0\n67.41594256003046 0\n67.36448332875622 0\n67.31307461746414 0\n67.26171637655635 0\n67.21040855648367 0\n67.15915110774556 0\n67.10794398089007 0\n67.05678712651381 0\n67.00568049526188 0\n66.95462403782787 0\n66.90361770495373 0\n66.8526614474298 0\n66.80175521609469 0\n66.75089896183533 0\n66.70009263558684 0\n66.64933618833251 0\n66.59862957110374 0\n66.54797273498004 0\n66.4973656310889 0\n66.44680821060582 0\n66.39630042475423 0\n66.34584222480545 0\n66.29543356207863 0\n66.24507438794072 0\n66.1947646538064 0\n66.14450431113808 0\n66.09429331144578 0\n66.04413160628715 0\n65.99401914726741 0\n66.16306020540095 1\n66.33193530786374 1\n66.5006446175824 1\n66.66918829732354 1\n66.83756650969404 1\n67.0057794171411 1\n67.17382718195245 1\n67.34170996625649 1\n67.50942793202245 1\n67.67698124106056 1\n67.84437005502218 1\n68.01159453539998 1\n67.95955052416639 0\n67.90755760702135 0\n67.85561573380335 0\n67.80372485440013 0\n67.75188491874864 0\n67.70009587683496 0\n67.6483576786943 0\n67.59667027441087 0\n67.54503361411794 0\n67.49344764799771 0\n67.44191232628128 0\n67.39042759924864 0\n67.33899341722856 0\n67.28760973059862 0\n67.23627648978506 0\n67.18499364526281 0\n67.13376114755543 0\n67.08257894723506 0\n67.03144699492236 0\n66.98036524128646 0\n66.92933363704492 0\n66.87835213296368 0\n66.82742067985704 0\n66.77653922858755 0\n66.72570773006605 0\n66.6629826785753 0\n66.61226266393606 0\n66.56159244355476 0\n66.51097196854599 0\n66.46040119007235 0\n66.40988005934437 0\n66.3594085276205 0\n66.30898654620704 0\n65.50019315974704 0\n65.66971903041014 1\n65.83907846943889 1\n66.00827164022718 1\n66.17729870600847 1\n66.34615982985599 1\n66.51485517468284 1\n66.68338490324217 1\n66.8517491781274 1\n67.01994816177229 1\n67.18798201645113 1\n67.3558509042789 1\n67.52355498721143 1\n67.69109442704554 1\n67.85846938541923 1\n68.02568002381179 1\n67.97362218418229 0\n67.92161545221732 0\n67.86965977774207 0\n67.81775511063097 0\n67.76590140080764 0\n67.71409859824487 0\n67.6623466529646 0\n67.6106455150378 0\n67.55899513458448 0\n67.50739546177358 0\n67.455846446823 0\n67.4043480399995 0\n67.35290019161869 0\n67.3015028520449 0\n67.25015597169126 0\n67.19885950101951 0\n67.14761339054009 0\n67.09641759081197 0\n67.0452720524427 0\n66.99417672608831 0\n66.94313156245327 0\n66.89213651229045 0\n66.84119152640105 0\n66.79029655563458 0\n66.73945155088883 0\n66.68865646310975 0\n66.6379112432915 0\n66.5872158424763 0\n66.53657021175447 0\n66.48597430226432 0\n66.43542806519217 0\n66.38493145177222 0\n66.33448441328656 0\n66.28408690106512 0\n66.23373886648561 0\n66.18344026097346 0\n66.13319103600179 0\n66.08299114309138 0\n66.03284053381059 0\n65.98273915977532 0\n66.15179129201069 1\n66.32067745770333 1\n66.48939781979053 1\n66.65795254104958 1\n66.826341784098 1\n66.99456571139365 1\n67.14139247890859 1\n67.30930710590788 1\n67.47705688310761 1\n67.64464197234868 1\n67.81206253531312 1\n67.97931873352422 1\n68.14641072834672 1\n68.09423436162521 0\n68.04210921893194 0\n67.99003524997785 0\n67.93801240452322 0\n67.88604063237769 0\n67.83411988340015 0\n67.78225010749873 0\n67.7304312546307 0\n67.67866327480252 0\n67.62694611806968 0\n67.57527973453675 0\n67.52366407435723 0\n67.4720990877336 0\n67.4205847249172 0\n67.36912093620825 0\n67.3177076719557 0\n67.2663448825573 0\n67.21503251845948 0\n67.16377053015731 0\n67.11255886819447 0\n67.06139748316319 0\n67.01028632570421 0\n66.95922534650674 0\n66.90821449630836 0\n66.85725372589506 0\n66.80634298610111 0\n66.75548222780908 0\n66.70467140194974 0\n66.65391045950204 0\n66.60319935149306 0\n66.55253802899794 0\n66.50192644313988 0\n66.45136454509004 0\n66.40085228606753 0\n66.35038961733936 0\n66.29997649022036 0\n66.24961285607317 0\n66.19929866630818 0\n66.14903387238348 0\n66.09881842580482 0\n66.04865227812556 0\n65.99853538094662 0\n66.16757200527812 1\n66.33644267829175 1\n66.50514756290983 1\n66.67368682189473 1\n66.84206061784906 1\n67.01026911321576 1\n67.17831247027829 1\n67.34619085116081 1\n67.51390441782831 1\n67.68145333208676 1\n67.84883775558329 1\n68.01605784980633 1\n67.96400945672407 0\n67.91201216203223 0\n67.86006591556507 0\n\n\n\nplt.imshow(thermogram)\n\n<matplotlib.image.AxesImage at 0x7f6373c64a60>\n\n\n\n\n\nBad pipe message: %s [b'\\x87\"\\x03s]x\\xd3\\xcf\\xef\\x9fu\\xfd\\xb6\\x1b\\x81gZ\\x18 a*}\\x9c9\\x9f\\x8a\\x08\\x8f\\xf9\\x1c\\xfa\\xa5<\\x16\\xd2\\xab\\xd6\\xed^w\\xa7\\x14|\\xdc\\xb6\\x04$T\\xb6zM\\x00\\x08\\x13\\x02\\x13\\x03\\x13\\x01\\x00\\xff\\x01\\x00\\x00\\x8f\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x0c\\x00\\n\\x00\\x1d\\x00\\x17\\x00\\x1e\\x00\\x19\\x00\\x18\\x00#\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\r\\x00\\x1e\\x00\\x1c\\x04\\x03\\x05\\x03\\x06\\x03\\x08\\x07\\x08\\x08\\x08\\t\\x08\\n\\x08\\x0b\\x08\\x04\\x08\\x05\\x08\\x06\\x04\\x01\\x05\\x01\\x06\\x01\\x00+\\x00\\x03\\x02\\x03\\x04\\x00-\\x00\\x02\\x01\\x01\\x00']\nBad pipe message: %s [b\"\\xeb\\xf9U63\\xb2`\\x8bxH\\xfacG;m\\xe3d\\xfc\\x00\\x00|\\xc0,\\xc00\\x00\\xa3\\x00\\x9f\\xcc\\xa9\\xcc\\xa8\\xcc\\xaa\\xc0\\xaf\\xc0\\xad\\xc0\\xa3\\xc0\\x9f\\xc0]\\xc0a\\xc0W\\xc0S\\xc0+\\xc0/\\x00\\xa2\\x00\\x9e\\xc0\\xae\\xc0\\xac\\xc0\\xa2\\xc0\\x9e\\xc0\\\\\\xc0`\\xc0V\\xc0R\\xc0$\\xc0(\\x00k\\x00j\\xc0#\\xc0'\\x00g\\x00@\\xc0\\n\\xc0\\x14\\x009\\x008\\xc0\\t\\xc0\\x13\\x003\\x002\\x00\\x9d\\xc0\\xa1\\xc0\\x9d\\xc0Q\\x00\\x9c\\xc0\\xa0\\xc0\\x9c\\xc0P\\x00=\\x00<\\x005\\x00/\\x00\\x9a\\x00\\x99\\xc0\\x07\\xc0\"]\nBad pipe message: %s [b'\\x96\\x00\\x05\\x00\\xff\\x01\\x00\\x00j\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00']\nBad pipe message: %s [b'\\x96`\\xcb\\xe8\\x12\\xa5\\x08\\xde\\x168\\x06\\xc7\\x15\\xcc\\x174\\x1e\\xa8\\x00\\x00\\xa6\\xc0,\\xc00\\x00\\xa3\\x00\\x9f\\xcc\\xa9\\xcc\\xa8\\xcc\\xaa\\xc0\\xaf\\xc0\\xad\\xc0\\xa3\\xc0\\x9f\\xc0]\\xc0a\\xc0W\\xc0S\\xc0+\\xc0/\\x00\\xa2\\x00\\x9e\\xc0\\xae\\xc0\\xac\\xc0\\xa2']\nBad pipe message: %s [b\"\\xc0\\\\\\xc0`\\xc0V\\xc0R\\xc0$\\xc0(\\x00k\\x00j\\xc0s\\xc0w\\x00\\xc4\\x00\\xc3\\xc0#\\xc0'\\x00g\\x00@\\xc0r\\xc0v\\x00\\xbe\\x00\\xbd\\xc0\\n\\xc0\\x14\\x009\\x008\\x00\\x88\\x00\\x87\\xc0\\t\\xc0\\x13\\x003\\x002\\x00\\x9a\\x00\\x99\\x00E\\x00D\\xc0\\x07\\xc0\\x11\\xc0\\x08\\xc0\\x12\\x00\\x16\\x00\\x13\\x00\\x9d\\xc0\\xa1\\xc0\\x9d\\xc0Q\\x00\\x9c\\xc0\\xa0\\xc0\\x9c\\xc0P\\x00=\\x00\\xc0\\x00<\\x00\\xba\\x005\\x00\\x84\\x00/\\x00\\x96\\x00A\\x00\\x05\\x00\\n\\x00\\xff\\x01\\x00\\x00j\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x0c\\x00\\n\\x00\\x1d\\x00\\x17\\x00\\x1e\\x00\\x19\\x00\\x18\\x00#\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\r\\x000\\x00.\\x04\\x03\\x05\\x03\\x06\\x03\\x08\"]\nBad pipe message: %s [b'\\x08\\x08\\t\\x08\\n\\x08']\nBad pipe message: %s [b'\\x04\\x08\\x05\\x08\\x06\\x04\\x01\\x05\\x01\\x06']\nBad pipe message: %s [b'\\x04\\x14\\xdf\\xd5\\\\V\\xde\\x01\\xff\\x06\\xe7`\\xe3\\x95\\x16\\x15/!\\x00\\x00>\\xc0\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\xc0\\x0f\\xc0\\x05\\x005\\xc0\\x13\\xc0\\t\\x003\\x002\\x001\\x000\\xc0\\x0e\\xc0\\x04\\x00']\nBad pipe message: %s [b'', b'\\x03\\x03']\nBad pipe message: %s [b'\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00\\x96\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\x00\\xff\\x02\\x01\\x00\\x00C\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0']\nBad pipe message: %s [b'']\nBad pipe message: %s [b'', b'\\x02']\nBad pipe message: %s [b'\\xd0\\xad@\\xd9\\x91\\r\\xdf$\\x0f\\x97\\xecx\\xf4M\\xf1\\xbc\\x08\\x16\\x00\\x00\\xa2\\xc0\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\x00\\x88\\x00\\x87\\x00']\nBad pipe message: %s [b'\\x05\\x02\\x06']\nBad pipe message: %s [b'\\x85\\xc0\\x19\\x00:\\x00\\x89\\xc0\\x0f\\xc0\\x05\\x005\\x00\\x84\\xc0\\x13\\xc0\\t\\x003\\x002\\x001\\x000\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00E\\x00D\\x00C\\x00B\\xc0\\x18\\x004\\x00\\x9b\\x00F\\xc0\\x0e\\xc0\\x04\\x00/\\x00\\x96\\x00A\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x16\\x00\\x18\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\xc0\\x12\\xc0\\x08\\x00\\x16\\x00\\x13\\x00\\x10\\x00\\r\\xc0\\x17\\x00\\x1b\\xc0\\r\\xc0\\x03\\x00\\n\\x00\\x15\\x00\\x12\\x00\\x0f\\x00\\x0c\\x00\\x1a\\x00\\t\\x00\\x14\\x00\\x11\\x00\\x19\\x00\\x08\\x00\\x06\\x00\\x17\\x00\\x03\\xc0\\x10\\xc0\\x06\\xc0\\x15']\nBad pipe message: %s [b'\\x17\\x95\\xc5|s\\n\\xe9\\x17\\x93^\\xbb\\x89\\x93PF!\\x12\\xd3\\x00\\x00>\\xc0\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\xc0\\x0f\\xc0\\x05\\x005\\xc0\\x13\\xc0', b'3\\x002\\x001\\x000\\xc0']\nBad pipe message: %s [b'\\x04\\x00/\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00\\x96']\nBad pipe message: %s [b'\\xf7\\xf7\\xd8Uf\\xaf\\x91\\xbfSjk,\\xb8\\xac\\xbfcg\\xc3\\x00\\x00\\xa2\\xc0\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\x00\\x88\\x00\\x87\\x00\\x86\\x00\\x85\\xc0\\x19\\x00:\\x00\\x89\\xc0\\x0f\\xc0\\x05\\x005\\x00\\x84\\xc0\\x13\\xc0\\t\\x003\\x002\\x001\\x000\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00E\\x00D\\x00C\\x00B\\xc0\\x18\\x004\\x00\\x9b\\x00F\\xc0\\x0e\\xc0\\x04\\x00', b'\\x96\\x00A\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x16\\x00\\x18\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\xc0\\x12\\xc0\\x08\\x00\\x16\\x00\\x13\\x00\\x10\\x00\\r\\xc0\\x17\\x00\\x1b\\xc0\\r\\xc0\\x03\\x00\\n\\x00\\x15\\x00']\nBad pipe message: %s [b'\\x0f\\x00\\x0c\\x00\\x1a\\x00\\t\\x00\\x14\\x00\\x11\\x00\\x19\\x00\\x08\\x00\\x06']\nBad pipe message: %s [b'\\x17\\xac\\xeaE\\x9c,\\xef\\x1dk\\x10\\x1b\\x94\\xf0\\x99[\\x83\\x07\\xc8\\x00\\x00']\nBad pipe message: %s [b'\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\x00\\x88\\x00\\x87\\x00\\x86\\x00\\x85\\xc0\\x19\\x00:\\x00\\x89\\xc0\\x0f\\xc0\\x05\\x005\\x00\\x84\\xc0\\x13\\xc0\\t\\x003\\x002\\x001\\x000\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00E\\x00D\\x00C\\x00B\\xc0\\x18\\x004\\x00\\x9b\\x00F\\xc0\\x0e\\xc0\\x04\\x00/\\x00\\x96\\x00A\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x16\\x00\\x18\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\xc0\\x12\\xc0\\x08\\x00\\x16\\x00\\x13\\x00\\x10\\x00\\r\\xc0\\x17\\x00\\x1b\\xc0\\r\\xc0\\x03\\x00\\n\\x00\\x15\\x00\\x12\\x00\\x0f\\x00\\x0c\\x00\\x1a\\x00\\t\\x00\\x14\\x00\\x11\\x00\\x19\\x00\\x08\\x00\\x06\\x00\\x17\\x00\\x03\\xc0\\x10\\xc0\\x06\\xc0\\x15\\xc0\\x0b\\xc0\\x01\\x00\\x02\\x00\\x01\\x00\\xff']\nBad pipe message: %s [b\"\\xbf;=\\x03\\r\\xb99hZQB\\xb8\\xd1g\\xb4\\x0c\\xe1\\x88\\x00\\x00\\x86\\xc00\\xc0,\\xc0(\\xc0$\\xc0\\x14\\xc0\\n\\x00\\xa5\\x00\\xa3\\x00\\xa1\\x00\\x9f\\x00k\\x00j\\x00i\\x00h\\x009\\x008\\x007\\x006\\xc02\\xc0.\\xc0*\\xc0&\\xc0\\x0f\\xc0\\x05\\x00\\x9d\\x00=\\x005\\xc0/\\xc0+\\xc0'\\xc0#\\xc0\\x13\\xc0\\t\\x00\\xa4\\x00\\xa2\\x00\\xa0\\x00\\x9e\\x00g\\x00@\\x00?\\x00>\\x003\\x002\\x001\\x000\\xc01\\xc0-\\xc0)\\xc0%\\xc0\\x0e\\xc0\\x04\\x00\\x9c\\x00<\\x00/\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00\\x96\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\x00\\xff\\x02\\x01\\x00\\x00g\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x1c\\x00\\x1a\\x00\\x17\\x00\\x19\\x00\\x1c\\x00\\x1b\\x00\\x18\\x00\\x1a\\x00\\x16\\x00\\x0e\\x00\\r\\x00\\x0b\\x00\\x0c\\x00\\t\\x00\\n\\x00#\\x00\\x00\\x00\\r\\x00 \\x00\\x1e\\x06\\x01\\x06\\x02\\x06\\x03\\x05\\x01\\x05\\x02\\x05\\x03\\x04\\x01\\x04\\x02\\x04\\x03\\x03\\x01\\x03\"]\nBad pipe message: %s [b'\\x03', b'\\x02', b'\\x03']\nBad pipe message: %s [b'\\x0f\\xd7U\\x88\\x8e\\x15\\x11\\xa8t,\\xb8K\\x1a.B\\xdb\\xd5\\x86\\x00\\x00\\xf4\\xc00\\xc0,\\xc0(\\xc0$\\xc0\\x14\\xc0\\n\\x00\\xa5\\x00\\xa3\\x00\\xa1\\x00\\x9f\\x00k\\x00j\\x00i\\x00h\\x009\\x008\\x007\\x006\\x00\\x88\\x00']\nBad pipe message: %s [b\"\\x86\\x00\\x85\\xc0\\x19\\x00\\xa7\\x00m\\x00:\\x00\\x89\\xc02\\xc0.\\xc0*\\xc0&\\xc0\\x0f\\xc0\\x05\\x00\\x9d\\x00=\\x005\\x00\\x84\\xc0/\\xc0+\\xc0'\\xc0#\\xc0\\x13\\xc0\\t\\x00\\xa4\\x00\\xa2\\x00\\xa0\\x00\\x9e\\x00g\\x00@\\x00?\\x00>\\x003\\x002\\x001\\x000\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00E\\x00D\\x00C\\x00B\\xc0\\x18\\x00\\xa6\\x00l\\x004\\x00\\x9b\\x00F\\xc01\\xc0-\\xc0)\\xc0%\\xc0\\x0e\\xc0\\x04\\x00\\x9c\\x00<\\x00/\\x00\\x96\\x00A\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x16\\x00\\x18\\xc0\\x0c\\xc0\\x02\\x00\"]\nBad pipe message: %s [b'\\x04\\xc0\\x12\\xc0']\nBad pipe message: %s [b'\\x16\\x00\\x13\\x00\\x10\\x00\\r']\n\n\n\n\n\n<AxesSubplot: xlabel='time'>"
  },
  {
    "objectID": "power.html",
    "href": "power.html",
    "title": "Real Time Power Prices",
    "section": "",
    "text": "source\n\nload_power\n\n load_power ()\n\nReturn power price\n\n# export\nplot_power(df.loc['2020-01'])"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cylinder",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cylinder",
    "section": "Install",
    "text": "Install\npip install cylinder"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "cylinder",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "demand.html",
    "href": "demand.html",
    "title": "Sample Demand Profile",
    "section": "",
    "text": "source\n\nload_demand\n\n load_demand (bed=1, unit=1)\n\nOther potential demand profiles https://uknowledge.uky.edu/cgi/viewcontent.cgi?article=1082&context=bae_etds"
  }
]