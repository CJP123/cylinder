# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_power.ipynb.

# %% auto 0
__all__ = ['load_power', 'plot_power']

# %% ../nbs/10_power.ipynb 3
import pandas as pd
import numpy as np

# %% ../nbs/10_power.ipynb 4
def load_power():
    "Return power price"
    return (pd.read_csv('../data/powerprices.csv')
            .assign(time = lambda df_: pd.to_datetime(df_.dt))
            .set_index('time')
            .sort_index()
            .resample('60s').mean(numeric_only=True)
            .assign(price = lambda df_: df_.price.interpolate(method='linear'),
                  price_kw = lambda df_: df_.price/1000,
                  date = lambda df_: df_.index.date,
                  week = lambda df_: df_.index.isocalendar().week,
                  hour = lambda df_: df_.index.hour,
                  day = lambda df_: df_.index.dayofweek,
                  peak = lambda df_: np.where((df_.hour.isin([7,8,9,10,17,18,19,20])& (~df_.day <5)), 1, 0),
                  tou = lambda df_: np.where((df_.hour.isin([7,8,9,10,17,18,19,20])& (~df_.day <5)), .12, .02),
                  cost = lambda df_: df_.price_kw+df_.tou)
            .assign(n_cost = lambda df_ :-0.5+ (df_.cost - 0) / (.1 - 0),
    	            sr_cost = lambda df_ :df_.cost.rolling(60).mean().shift(-60)/df_.cost/6,
    	            lr_cost = lambda df_ :df_.cost.rolling(120).mean().shift(-120)/df_.cost/6,
            )
            .dropna()
            .drop(columns=['trade'])
            )

# %% ../nbs/10_power.ipynb 6
# plot using plotly
import plotly.express as px
import plotly.graph_objects as go
def plot_power(df):
    "Plot power price"
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df.index, y=df.price_kw,
                        mode='lines',
                        name='price'))
    fig.add_trace(go.Scatter    (x=df.index, y=df.cost,
                        mode='lines',
                        name='cost'))
    fig.add_trace(go.Scatter    (x=df.index, y=df.n_cost,

                        mode='lines',
                        name='n_cost'))

    

    fig.show()
