# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_demand.ipynb.

# %% auto 0
__all__ = ['flow', 'fig', 'ax', 'load_demand']

# %% ../nbs/05_demand.ipynb 4
import pandas as pd	
import numpy as np
import matplotlib.pyplot as plt
import random

# %% ../nbs/05_demand.ipynb 5
def load_demand(bed=1,unit=1):
    if not (bed in [1, 2, 3, 4, 5]) and (unit in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):
        print('Not valid bed / unit choice')
        return pd.DataFrame()
    base = pd.read_csv('../data/drawprofiles/MinuteDrawProfilesMaxFlows.csv')
    df = pd.read_csv(f'../data/drawprofiles/DHWDrawSchedule_{bed}bed_unit{unit}_1min_fraction.csv')
    df = df.fillna(0)
    '''
    Translate between the BEOpt Data
    see https://github.com/jmaguire1/WaterHeaterPythonModel/blob/01f8a3c88096c9cbdbb49c354405d65fb37c2d7e/WH_control_fleet.py
    '''
    sh_hsp_tot = 14.0 + 4.67 * bed
    s_hsp_tot = 12.5 + 4.16 * bed
    cw_hsp_tot = 2.35 + 0.78 * bed
    dw_hsp_tot = 2.26 + 0.75 * bed
    b_hsp_tot = 3.50 + 1.17 * bed
    df.Showers =  base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'Showers Max'].values[0] * df.Showers * \
                    sh_hsp_tot / base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'Showers Sum'].values[0]
    df.Sinks =  base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'Sinks Max'].values[0] * df.Sinks * \
                    s_hsp_tot / base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'Sinks Sum'].values[0]
    df.CW =  base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'CW Max'].values[0] * df.CW * \
                    cw_hsp_tot / base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'CW Sum'].values[0]
    df.DW =  base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'DW Max'].values[0] * df.DW * \
                    dw_hsp_tot / base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'DW Sum'].values[0]
    df.Baths =  base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'Baths Max'].values[0] * df.Baths * \
                    b_hsp_tot / base.loc[((base.Bedrooms == bed) & (base.Unit== unit)),'Baths Sum'].values[0]
    # The flows can be split into hot and warm if more granular detail is required
    df = df * 3.785411784 # convert from US GPM to lpm
    df['total_lpm'] = df.sum(axis=1)
    df['total_m3s'] = df.total_lpm/60000 * 45 / 60
    df[f'{bed}_{unit}'] = df.total_m3s
    df['timestamp'] = pd.date_range(start='1/1/2020', periods=len(df), freq='60S')
    df = df.set_index('timestamp')
    return df[f'{bed}_{unit}']

# %% ../nbs/05_demand.ipynb 6
# flow = pd.concat([load_demand(bed=b,unit=u) for u in range(10) for b in range(1,6)], axis=1)

# %% ../nbs/05_demand.ipynb 7
flow = load_demand(bed=2,unit=3)

# %% ../nbs/05_demand.ipynb 9
fig, ax = plt.subplots(figsize=(12,6))
ax.plot(flow['2020-01-01'])
ax.set_ylabel('Flow (m3/s)')
ax.set_xlabel('Time')
ax.set_title('Flow for 2 bed 3 unit')
